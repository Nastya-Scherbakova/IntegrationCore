// <auto-generated />
using System;
using IntegrationCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IntegrationCore.Migrations
{
    [DbContext(typeof(IntegratorContext))]
    [Migration("20200512083505_AddTypeUrlEnding")]
    partial class AddTypeUrlEnding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IntegrationCore.Models.DB.ConnectionFieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("ConnectionFieldDefinition");
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.ConnectionFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConnectionFieldId")
                        .HasColumnType("int");

                    b.Property<int>("IntegrationId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionFieldId");

                    b.HasIndex("IntegrationId");

                    b.ToTable("ConnectionFieldValue");
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.FieldConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstFieldFilterFunction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstFieldId")
                        .HasColumnType("int");

                    b.Property<int>("IntegrationId")
                        .HasColumnType("int");

                    b.Property<string>("SecondFieldFilterFunction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondFieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstFieldId")
                        .IsUnique();

                    b.HasIndex("IntegrationId");

                    b.HasIndex("SecondFieldId")
                        .IsUnique();

                    b.ToTable("FieldConnection");
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.FieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArray")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBasicType")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfFieldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("FieldDefinition");
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.Integration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeFromId")
                        .HasColumnType("int");

                    b.Property<int>("TypeToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeFromId");

                    b.HasIndex("TypeToId");

                    b.ToTable("Integration");
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.SystemDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferType")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemDefinition");
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntegrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.TypeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SystemId")
                        .HasColumnType("int");

                    b.Property<string>("UrlEnding")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SystemId");

                    b.ToTable("TypeDefinition");
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.ConnectionFieldDefinition", b =>
                {
                    b.HasOne("IntegrationCore.Models.DB.SystemDefinition", "SystemDefinition")
                        .WithMany("ConnectionFields")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.ConnectionFieldValue", b =>
                {
                    b.HasOne("IntegrationCore.Models.DB.ConnectionFieldDefinition", "ConnectionField")
                        .WithMany("ConnectionFieldValues")
                        .HasForeignKey("ConnectionFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntegrationCore.Models.DB.Integration", "Integration")
                        .WithMany("ConnectionFieldValues")
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.FieldConnection", b =>
                {
                    b.HasOne("IntegrationCore.Models.DB.FieldDefinition", "FirstField")
                        .WithOne()
                        .HasForeignKey("IntegrationCore.Models.DB.FieldConnection", "FirstFieldId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("IntegrationCore.Models.DB.Integration", "Integration")
                        .WithMany("FieldConnections")
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntegrationCore.Models.DB.FieldDefinition", "SecondField")
                        .WithOne()
                        .HasForeignKey("IntegrationCore.Models.DB.FieldConnection", "SecondFieldId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.FieldDefinition", b =>
                {
                    b.HasOne("IntegrationCore.Models.DB.TypeDefinition", "Type")
                        .WithMany("Fields")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.Integration", b =>
                {
                    b.HasOne("IntegrationCore.Models.DB.TypeDefinition", "TypeFrom")
                        .WithMany()
                        .HasForeignKey("TypeFromId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("IntegrationCore.Models.DB.TypeDefinition", "TypeTo")
                        .WithMany()
                        .HasForeignKey("TypeToId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.Transaction", b =>
                {
                    b.HasOne("IntegrationCore.Models.DB.Integration", "Integration")
                        .WithMany()
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntegrationCore.Models.DB.TypeDefinition", b =>
                {
                    b.HasOne("IntegrationCore.Models.DB.SystemDefinition", "SystemDefinition")
                        .WithMany("TypeDefinitions")
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
